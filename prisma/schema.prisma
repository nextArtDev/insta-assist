generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model User {
    id           String         @id @default(uuid()) @db.Char(36)
    clerkId      String         @unique
    email        String         @unique
    firstname    String?        @unique
    lastname     String?        @unique
    createdAt    DateTime       @default(now())
    subscription Subscription?
    integrations Integrations[]
    automations  Automation[]
}

model Subscription {
    id         String            @id @default(uuid()) @db.Char(36)
    User       User?             @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId     String?           @unique @db.Char(36)
    createdAt  DateTime          @default(now())
    plan       SUBSCRIPTION_PLAN @default(FREE)
    updatedAt  DateTime          @default(now())
    customerId String?           @unique
}

model Integrations {
    id          String       @id @default(uuid()) @db.Char(36) // UUIDs are stored as strings in MySQL
    name        INTEGRATIONS @default(INSTAGRAM)
    createdAt   DateTime     @default(now())
    User        User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId      String?      @db.Char(36) // UUIDs are stored as strings in MySQL
    token       String       @unique
    expiresAt   DateTime?
    instagramId String?      @unique
}

model Automation {
    id        String    @id @default(uuid()) @db.Char(36)
    name      String    @default("Untitled")
    createdAt DateTime  @default(now())
    active    Boolean   @default(false)
    trigger   Trigger[]
    listener  Listener?
    posts     Post[]
    dms       Dms[]
    User      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String?   @db.Char(36)
    keywords  Keyword[]
}

model Dms {
    id           String      @id @default(uuid()) @db.Char(36)
    Automation   Automation? @relation(fields: [automationId], references: [id])
    automationId String?     @db.Char(36)
    createdAt    DateTime    @default(now())
    senderId     String?
    reciever     String?
    message      String?
}

model Post {
    id           String      @id @default(uuid()) @db.Char(36)
    postid       String
    caption      String?
    media        String
    mediaType    MEDIATYPE   @default(IMAGE)
    Automation   Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)
    automationId String?     @db.Char(36)
}

model Listener {
    id           String     @id @default(uuid()) @db.Char(36)
    Automation   Automation @relation(fields: [automationId], references: [id], onDelete: Cascade)
    automationId String     @unique @db.Char(36)
    listener     LISTENERS  @default(MESSAGE)
    prompt       String
    commentReply String?
    dmCount      Int        @default(0)
    commentCount Int        @default(0)
}

model Trigger {
    id           String      @id @default(uuid()) @db.Char(36)
    type         String
    Automation   Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)
    automationId String?     @db.Char(36)
}

model Keyword {
    id           String      @id @default(uuid()) @db.Char(36)
    word         String
    Automation   Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)
    automationId String?     @db.Char(36)

    @@unique([automationId, word]) //this constraints ensure user cant use the same keyword on multiple automations
}

enum SUBSCRIPTION_PLAN {
    PRO
    FREE
}

enum INTEGRATIONS {
    INSTAGRAM
}

enum MEDIATYPE {
    IMAGE
    VIDEO
    CAROSEL_ALBUM
}

enum LISTENERS {
    SMARTAI
    MESSAGE
}
